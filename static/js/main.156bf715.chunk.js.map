{"version":3,"sources":["Components/Button.js","Components/display.js","Components/clear.jsx","App.js","serviceWorker.js","index.js"],"names":["isOperator","val","isNaN","Button","props","onClick","value","handleEqual","handleClick","className","Display","Clear","style","height","display","justifyContent","backgroundColor","alignItems","fontSize","fontWeight","color","padding","width","textAlign","cursor","borderRadius","handleClear","App","useState","state","setState","buttons","math","map","item","key","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAGMA,G,YAAa,SAAAC,GACf,OAAQC,MAAMD,IAAgB,MAARA,GAAuB,MAARA,IAOlC,SAASE,EAAOC,GACnB,OACI,yBAAKC,SANSJ,EAMcG,EAAME,MALvB,MAARL,EAKuCG,EAAMG,YAAc,kBAAIH,EAAMI,YAAYJ,EAAME,SAAQG,UAAWT,EAAWI,EAAME,OAAQ,MAAQ,YACzIF,EAAME,OAPG,IAAAL,E,UCGPS,EARC,SAAAN,GAEZ,OACI,yBAAKK,UAAU,WACX,4BAAML,EAAME,SC4BTK,EAhCD,SAAAP,GAuBV,OACI,yBAAKK,UAAU,QACfG,MAvBU,CACVC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,gBAAiB,UACjBC,WAAY,SACZC,SAAU,OACVC,WAAY,OACZC,MAAO,YAgBH,wBAAIR,MAbO,CACfI,gBAAiB,UACjBI,MAAO,QACPC,QAAS,YACTC,MAAO,MACPC,UAAW,SACXC,OAAQ,UACRC,aAAc,QAOTpB,QAASD,EAAMsB,aADhB,W,QCmBGC,MAxCf,WAAgB,IAAD,EAEcC,mBAAS,KAFvB,mBAENC,EAFM,KAEEC,EAFF,KAIPC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEtFvB,EAAc,SAAAP,GAEhB6B,EADW,MAAVD,EACQA,EAAQ5B,EAERA,IAIPM,EAAc,WAClBuB,EAASE,IAAcH,KAKzB,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEH,MAASuB,IAEX,yBAAKpB,UAAU,eACZsB,EAAQE,KAAI,SAAAC,GAAI,OAAE,kBAAC/B,EAAD,CACjBG,MAAS4B,EACTC,IAAOJ,EAAQK,QAAQF,GACvB1B,YAAeA,EACfD,YAAeA,QAGnB,kBAAC,EAAD,CAAOmB,YAjBO,WAClBI,EAAS,WCbOO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.156bf715.chunk.js","sourcesContent":["import React from 'react'\r\nimport './button.css'\r\n\r\nconst isOperator = val =>{\r\n    return !isNaN(val) || val === '.' || val === '='\r\n}\r\n\r\nconst ShiftFunction = val =>{\r\n    return val === '='\r\n}\r\n\r\nexport function Button(props){\r\n    return(\r\n        <div onClick={ShiftFunction(props.value)? props.handleEqual : ()=>props.handleClick(props.value)} className={isOperator(props.value)? 'btn' : 'operator'}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport './display.css'\r\nconst Display = props =>{\r\n\r\n    return(\r\n        <div className=\"display\">\r\n            <h3>{ props.value }</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default Display","import React from 'react'\r\n\r\nconst Clear = props =>{\r\n\r\n    const style = {\r\n        height: '55px',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#000000',\r\n        alignItems: 'center',\r\n        fontSize: '20px',\r\n        fontWeight: 'bold',\r\n        color: '#ffffff'\r\n    }\r\n\r\n    const ClearStyle = {\r\n        backgroundColor: '#ffffff',\r\n        color: 'black',\r\n        padding: '10px 18px',\r\n        width: '72%',\r\n        textAlign: 'center',\r\n        cursor: 'pointer',\r\n        borderRadius: '20px'\r\n    }\r\n\r\n    return(\r\n        <div className=\"clear\"\r\n        style={style}>\r\n            <h3 style = {ClearStyle}\r\n             onClick={props.handleClear}\r\n            >Clear</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default Clear","import React , { useState }from 'react';\nimport './App.css'\nimport {Button} from './Components/Button'\nimport Display from './Components/display'\nimport Clear from './Components/clear'\nimport * as math from 'mathjs'\n\nfunction App() {\n\n  const [state , setState] = useState('0')\n\n  const buttons = ['7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', '0' ,'.' ,'=' ,'+']\n\n  const handleClick = val =>{\n    if(state !== '0'){\n      setState(state + val)\n    }else{\n      setState(val)\n    }\n    \n  }\n  const handleEqual = () =>{\n    setState(math.evaluate(state) )\n  }\n  const handleClear = () =>{\n    setState('0')\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"calc-wrapper\">\n        <Display\n          value = {state}\n        />\n        <div className=\"btn-wrapper\">\n          {buttons.map(item=><Button\n            value = {item}\n            key = {buttons.indexOf(item)}\n            handleClick = {handleClick}\n            handleEqual = {handleEqual}\n          />)}\n        </div>\n        <Clear handleClear = {handleClear}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}